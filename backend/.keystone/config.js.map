{
  "version": 3,
  "sources": ["../keystone.ts", "../schema/Product.schema.ts", "../schema/Category.schema.ts", "../schema/User.schema.ts", "../schema/index.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\r\n//\r\n// This file is what Keystone uses as the entry-point to your headless backend\r\n//\r\n// Keystone imports the default export of this file, expecting a Keystone configuration object\r\n//   you can find out more at https://keystonejs.com/docs/apis/config\r\n\r\nimport { config } from \"@keystone-6/core\";\r\n\r\nimport { lists } from \"./schema/index\";\r\n\r\n// authentication is configured separately here too, but you might move this elsewhere\r\n// when you write your list-level access control functions, as they typically rely on session data\r\nimport { withAuth, session } from \"./auth\";\r\n// import { lists } from './schema/index';\r\n\r\nexport default withAuth(\r\n  config({\r\n    db: {\r\n      // we're using sqlite for the fastest startup experience\r\n      //   for more information on what database might be appropriate for you\r\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\r\n      provider: \"sqlite\",\r\n      url: \"file:./keystone.db\",\r\n    },\r\n    lists,\r\n    session,\r\n  })\r\n);\r\n", "import { list } from \"@keystone-6/core\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport { document } from \"@keystone-6/fields-document\";\r\nimport {\r\n  text,\r\n  relationship,\r\n  select,\r\n  integer,\r\n  image,\r\n} from \"@keystone-6/core/fields\";\r\nimport { cloudinaryImage } from \"@keystone-6/cloudinary\";\r\nimport \"dotenv/config\";\r\n\r\nconst Product = list({\r\n  access: allowAll,\r\n\r\n  fields: {\r\n    productName: text({\r\n      label: \"T\u00EAn s\u1EA3n ph\u1EA9m\",\r\n    }),\r\n    productDescription: document({\r\n      label: \"Mi\u00EAu t\u1EA3 v\u1EC1 s\u1EA3n ph\u1EA9m\",\r\n      formatting: true,\r\n      layouts: [\r\n        [1, 1],\r\n        [1, 1, 1],\r\n        [1, 1, 1, 1],\r\n      ],\r\n    }),\r\n    productCategory: relationship({\r\n      label: \"Nh\u00F3m s\u1EA3n ph\u1EA9m\",\r\n      ref: \"Category\",\r\n      many: true,\r\n    }),\r\n    productPrice: integer({\r\n      label: \"Gi\u00E1 s\u1EA3n ph\u1EA9m\",\r\n      validation: { isRequired: true },\r\n    }),\r\n    image: cloudinaryImage({\r\n      cloudinary: {\r\n        cloudName: process.env.CLOUDINARY_CLOUD_NAME ?? \"\",\r\n        apiKey: process.env.CLOUDINARY_API_KEY ?? \"\",\r\n        apiSecret: process.env.CLOUDINARY_API_SECRET ?? \"\",\r\n        folder: `/${process.env.CLOUDINARY_FOLDER ?? \"little_angle_mart\"}`,\r\n      },\r\n    }),\r\n  },\r\n});\r\n\r\nexport default Product;\r\n", "import { list } from \"@keystone-6/core\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport { text } from \"@keystone-6/core/fields\";\r\n\r\nconst Category = list({\r\n  access: allowAll,\r\n  fields: {\r\n    categoryName: text({\r\n      validation: { isRequired: true },\r\n    }),\r\n  },\r\n});\r\n\r\nexport default Category;\r\n", "import { list } from \"@keystone-6/core\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport { password, relationship, text } from \"@keystone-6/core/fields\";\r\n\r\nconst User = list({\r\n  access: allowAll,\r\n\r\n  fields: {\r\n    name: text({\r\n      validation: { isRequired: true },\r\n    }),\r\n    userEmail: text({\r\n      validation: { isRequired: true },\r\n      isIndexed: \"unique\",\r\n    }),\r\n    userPassword: password({\r\n      validation: {\r\n        isRequired: true,\r\n        length: { min: 5, max: 20 },\r\n      },\r\n    }),\r\n    userPhone: text({\r\n      validation: { isRequired: true },\r\n    }),\r\n    userAddress: text({}),\r\n    userRole: text({}),\r\n  },\r\n});\r\n\r\nexport default User;\r\n", "import Product from \"./Product.schema\";\r\nimport Category from \"./Category.schema\";\r\nimport User from \"./User.schema\";\r\n\r\nexport const lists = {\r\n  Product,\r\n  User,\r\n  Category,\r\n};\r\n", "// Welcome to some authentication for Keystone\r\n//\r\n// This is using @keystone-6/auth to add the following\r\n// - A sign-in page for your Admin UI\r\n// - A cookie-based stateless session strategy\r\n//    - Using a User email as the identifier\r\n//    - 30 day cookie expiration\r\n//\r\n// This file does not configure what Users can do, and the default for this starter\r\n// project is to allow anyone - logged-in or not - to do anything.\r\n//\r\n// If you want to prevent random people on the internet from accessing your data,\r\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\r\n//\r\n// If you want to learn more about how our out-of-the-box authentication works, please\r\n// read https://keystonejs.com/docs/apis/auth#authentication-api\r\n\r\nimport { randomBytes } from \"crypto\";\r\nimport { createAuth } from \"@keystone-6/auth\";\r\n\r\n// see https://keystonejs.com/docs/apis/session for the session docs\r\nimport { statelessSessions } from \"@keystone-6/core/session\";\r\n\r\n// for a stateless session, a SESSION_SECRET should always be provided\r\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\r\nlet sessionSecret = process.env.SESSION_SECRET;\r\nif (!sessionSecret && process.env.NODE_ENV !== \"production\") {\r\n  sessionSecret = randomBytes(32).toString(\"hex\");\r\n}\r\n\r\n// withAuth is a function we can use to wrap our base configuration\r\nconst { withAuth } = createAuth({\r\n  listKey: \"User\",\r\n  identityField: \"userEmail\",\r\n\r\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\r\n  //   this can be helpful for when you are writing your access control functions\r\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n  sessionData: \"name\",\r\n  secretField: \"userPassword\",\r\n\r\n  // WARNING: remove initFirstItem functionality in production\r\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\r\n  initFirstItem: {\r\n    // if there are no items in the database, by configuring this field\r\n    //   you are asking the Keystone AdminUI to create a new user\r\n    //   providing inputs for these fields\r\n    fields: [\"name\", \"userEmail\", \"userPassword\", \"userPhone\"],\r\n\r\n    // it uses context.sudo() to do this, which bypasses any access control you might have\r\n    //   you shouldn't use this in production\r\n  },\r\n});\r\n\r\n// statelessSessions uses cookies for session tracking\r\n//   these cookies have an expiry, in seconds\r\n//   we use an expiry of 30 days for this starter\r\nconst sessionMaxAge = 60 * 60 * 24 * 30;\r\n\r\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\r\nconst session = statelessSessions({\r\n  maxAge: sessionMaxAge,\r\n  secret: sessionSecret!,\r\n});\r\n\r\nexport { withAuth, session };\r\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields"]
}
